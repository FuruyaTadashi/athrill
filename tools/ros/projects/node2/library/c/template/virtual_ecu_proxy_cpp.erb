// ros/ros.h　ROSに関する基本的なAPIのためのヘッダ
#include "ros/ros.h"
#include "virtual_can_bus/can.h"
#include "acomm_init.h"
#include "athrill_comm.h"
#include <stdio.h>

#define FILEPATH_MAX    4096
static char mmap_filepath[FILEPATH_MAX];

/***********************************************************
 * Publisher
 ***********************************************************/
<%-
    BusType.getAll().each do |bus|
-%>
/*****************************
 * BUS: <%= bus.name %>
 *****************************/
<%-
            for elm in bus.elements do
                if elm.dir == "TX"
-%>
/*****************************
 * ELM: <%= elm.name %>
 *****************************/
 static void <%= bus.name %>_<%= elm.dir %>_<%= elm.name %>_do_task(ros::Publisher &pub)
 {
     acomm_rtype ret;
     acomm_uint8 can_data[8];

     ret = athrill_comm_recv(<%= BusType.getAll().index(bus) %>, <%= bus.elements.index(elm) %>, &can_data[0], 8U);
     if (ret != ACOMM_E_OK) {
         return;
     }
 
     virtual_can_bus::can msg;
     msg.c0 = can_data[0];
     msg.c1 = can_data[1];
     msg.c2 = can_data[2];
     msg.c3 = can_data[3];
     msg.c4 = can_data[4];
     msg.c5 = can_data[5];
     msg.c6 = can_data[6];
     msg.c7 = can_data[7];
 
     pub.publish(msg);
     return;
 }
 <%-
            end
        end
    end
-%>


/***********************************************************
 * Subscriber
 ***********************************************************/
<%-
    BusType.getAll().each do |bus|
-%>
/*****************************
 * BUS: <%= bus.name %>
 *****************************/
<%-
            for elm in bus.elements do
                if elm.dir == "RX"
-%>
/*****************************
 * ELM: <%= elm.name %>
 *****************************/
 static void <%= bus.name %>_<%= elm.dir %>_<%= elm.name %>_sub_callback(const virtual_can_bus::can msg)
 {
    acomm_rtype ret;
    acomm_uint8 can_data[8];
 
    can_data[0] = msg.c0;
    can_data[1] = msg.c1;
    can_data[2] = msg.c2;
    can_data[3] = msg.c3;
    can_data[4] = msg.c4;
    can_data[5] = msg.c5;
    can_data[6] = msg.c6;
    can_data[7] = msg.c7;
 
<%-
    if elm.busElmType.attribute == "overWrite" then
-%>
    ret = athrill_comm_send_force(<%= BusType.getAll().index(bus) %>, <%= bus.elements.index(elm) %>, &can_data[0], 8U);
    if (ret != ACOMM_E_OK) {
         fprintf(stderr, "ERROR: athrill_comm_send_force(<%= elm.name %>) err=%u\n", ret);
    }
<%-
    elsif elm.busElmType.attribute == "uniq" then
-%>
    ret = athrill_comm_send_uniq(<%= BusType.getAll().index(bus) %>, <%= bus.elements.index(elm) %>, &can_data[0], 8U);
    if (ret != ACOMM_E_OK) {
        fprintf(stderr, "ERROR: athrill_comm_send_uniq(<%= elm.name %>) err=%u\n", ret);
    }
<%-
    else
-%>     
    ret = athrill_comm_send(<%= BusType.getAll().index(bus) %>, <%= bus.elements.index(elm) %>, &can_data[0], 8U);
    if (ret != ACOMM_E_OK) {
        fprintf(stderr, "ERROR: athrill_comm_send(<%= elm.name %>) err=%u\n", ret);
    }
<%-
    end
-%>
 
    return;
 }

 <%-
            end
        end
    end
-%>

static void do_publish(void)
{
    ros::NodeHandle n;
<%-
    BusType.getAll().each do |bus|
        for elm in bus.elements do
            if elm.dir == "TX"
-%>
    ros::Publisher pub_<%= bus.name %>_<%= elm.dir %>_<%= elm.name %> = n.advertise<virtual_can_bus::can>("<%= bus.name %>/<%= elm.name %>", 1000);
<%-
            end
        end
    end
-%>

    ros::Rate loop_rate(100); /* 10ms */
    while (ros::ok())
    {
<%-
        BusType.getAll().each do |bus|
            for elm in bus.elements do
                if elm.dir == "TX"
-%>
        <%= bus.name %>_<%= elm.dir %>_<%= elm.name %>_do_task(pub_<%= bus.name %>_<%= elm.dir %>_<%= elm.name %>);
<%-
                end
            end
        end
-%>
        loop_rate.sleep();
    }
}

static void *thread_run(void *args)
{
    ros::NodeHandle n;
<%-
    BusType.getAll().each do |bus|
            for elm in bus.elements do
                if elm.dir == "RX"
-%>
    ros::Subscriber sub_<%= bus.name %>_<%= elm.dir %>_<%= elm.name %> = n.subscribe("<%= bus.name %>/<%= elm.name %>", 100, <%= bus.name %>_<%= elm.dir %>_<%= elm.name %>_sub_callback);
<%-
            end
        end
    end
-%>
    ros::spin();
    return NULL;
}


int main(int argc, char **argv)
{
    acomm_bus_metadata_type *p[ATHRILL_COMM_CONFIG_BUS_NUM];
<%-
    BusType.getAll().each do |bus|
-%>
    memset(mmap_filepath, 0, FILEPATH_MAX);
    sprintf(mmap_filepath, "%s/%s_<%= TypeBuilder.getNodeName() %>_<%= bus.name %>.bin", std::getenv("GENERATED_MMAP_PATH"), std::getenv("GENERATED_MMAP_FILE_PREFIX"));
    p[<%= BusType.getAll().index(bus) %>] = acomm_open(mmap_filepath);
    if (p[<%= BusType.getAll().index(bus) %>] == NULL) {
        fprintf(stderr, "ERROR: acomm_open() error: %s\n", mmap_filepath);
        return 1;
    }
<%-
    end
-%>
    ros::init(argc, argv, "virtual_ecu_proxy_<%= TypeBuilder.getNodeName() %>");
	pthread_t thread;
	pthread_create(&thread , NULL , thread_run , NULL);

    do_publish();
<%-
    BusType.getAll().each do |bus|
-%>
    acomm_close(p[<%= BusType.getAll().index(bus) %>]);
<%-
    end
-%>
    return 0;
}